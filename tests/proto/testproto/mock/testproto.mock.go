// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/douyu/jupiter/tests/proto/testproto (interfaces: GreeterClient,GreeterServer,Greeter_StreamHelloClient,Greeter_StreamHelloServer)

// Package mock_testproto is a generated GoMock package.
package mock_testproto

import (
	context "context"
	testproto "github.com/douyu/jupiter/tests/proto/testproto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockGreeterClient is a mock of GreeterClient interface
type MockGreeterClient struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterClientMockRecorder
}

// MockGreeterClientMockRecorder is the mock recorder for MockGreeterClient
type MockGreeterClientMockRecorder struct {
	mock *MockGreeterClient
}

// NewMockGreeterClient creates a new mock instance
func NewMockGreeterClient(ctrl *gomock.Controller) *MockGreeterClient {
	mock := &MockGreeterClient{ctrl: ctrl}
	mock.recorder = &MockGreeterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreeterClient) EXPECT() *MockGreeterClientMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockGreeterClient) SayHello(arg0 context.Context, arg1 *testproto.HelloRequest, arg2 ...grpc.CallOption) (*testproto.HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*testproto.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockGreeterClientMockRecorder) SayHello(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterClient)(nil).SayHello), varargs...)
}

// StreamHello mocks base method
func (m *MockGreeterClient) StreamHello(arg0 context.Context, arg1 ...grpc.CallOption) (testproto.Greeter_StreamHelloClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamHello", varargs...)
	ret0, _ := ret[0].(testproto.Greeter_StreamHelloClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamHello indicates an expected call of StreamHello
func (mr *MockGreeterClientMockRecorder) StreamHello(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamHello", reflect.TypeOf((*MockGreeterClient)(nil).StreamHello), varargs...)
}

// WhoServer mocks base method
func (m *MockGreeterClient) WhoServer(arg0 context.Context, arg1 *testproto.WhoServerReq, arg2 ...grpc.CallOption) (*testproto.WhoServerReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhoServer", varargs...)
	ret0, _ := ret[0].(*testproto.WhoServerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoServer indicates an expected call of WhoServer
func (mr *MockGreeterClientMockRecorder) WhoServer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoServer", reflect.TypeOf((*MockGreeterClient)(nil).WhoServer), varargs...)
}

// MockGreeterServer is a mock of GreeterServer interface
type MockGreeterServer struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterServerMockRecorder
}

// MockGreeterServerMockRecorder is the mock recorder for MockGreeterServer
type MockGreeterServerMockRecorder struct {
	mock *MockGreeterServer
}

// NewMockGreeterServer creates a new mock instance
func NewMockGreeterServer(ctrl *gomock.Controller) *MockGreeterServer {
	mock := &MockGreeterServer{ctrl: ctrl}
	mock.recorder = &MockGreeterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreeterServer) EXPECT() *MockGreeterServerMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockGreeterServer) SayHello(arg0 context.Context, arg1 *testproto.HelloRequest) (*testproto.HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", arg0, arg1)
	ret0, _ := ret[0].(*testproto.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockGreeterServerMockRecorder) SayHello(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterServer)(nil).SayHello), arg0, arg1)
}

// StreamHello mocks base method
func (m *MockGreeterServer) StreamHello(arg0 testproto.Greeter_StreamHelloServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamHello", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamHello indicates an expected call of StreamHello
func (mr *MockGreeterServerMockRecorder) StreamHello(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamHello", reflect.TypeOf((*MockGreeterServer)(nil).StreamHello), arg0)
}

// WhoServer mocks base method
func (m *MockGreeterServer) WhoServer(arg0 context.Context, arg1 *testproto.WhoServerReq) (*testproto.WhoServerReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoServer", arg0, arg1)
	ret0, _ := ret[0].(*testproto.WhoServerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoServer indicates an expected call of WhoServer
func (mr *MockGreeterServerMockRecorder) WhoServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoServer", reflect.TypeOf((*MockGreeterServer)(nil).WhoServer), arg0, arg1)
}

// MockGreeter_StreamHelloClient is a mock of Greeter_StreamHelloClient interface
type MockGreeter_StreamHelloClient struct {
	ctrl     *gomock.Controller
	recorder *MockGreeter_StreamHelloClientMockRecorder
}

// MockGreeter_StreamHelloClientMockRecorder is the mock recorder for MockGreeter_StreamHelloClient
type MockGreeter_StreamHelloClientMockRecorder struct {
	mock *MockGreeter_StreamHelloClient
}

// NewMockGreeter_StreamHelloClient creates a new mock instance
func NewMockGreeter_StreamHelloClient(ctrl *gomock.Controller) *MockGreeter_StreamHelloClient {
	mock := &MockGreeter_StreamHelloClient{ctrl: ctrl}
	mock.recorder = &MockGreeter_StreamHelloClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreeter_StreamHelloClient) EXPECT() *MockGreeter_StreamHelloClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockGreeter_StreamHelloClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockGreeter_StreamHelloClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockGreeter_StreamHelloClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGreeter_StreamHelloClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).Context))
}

// Header mocks base method
func (m *MockGreeter_StreamHelloClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockGreeter_StreamHelloClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).Header))
}

// Recv mocks base method
func (m *MockGreeter_StreamHelloClient) Recv() (*testproto.HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*testproto.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockGreeter_StreamHelloClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockGreeter_StreamHelloClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockGreeter_StreamHelloClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockGreeter_StreamHelloClient) Send(arg0 *testproto.HelloRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockGreeter_StreamHelloClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockGreeter_StreamHelloClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockGreeter_StreamHelloClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockGreeter_StreamHelloClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockGreeter_StreamHelloClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGreeter_StreamHelloClient)(nil).Trailer))
}

// MockGreeter_StreamHelloServer is a mock of Greeter_StreamHelloServer interface
type MockGreeter_StreamHelloServer struct {
	ctrl     *gomock.Controller
	recorder *MockGreeter_StreamHelloServerMockRecorder
}

// MockGreeter_StreamHelloServerMockRecorder is the mock recorder for MockGreeter_StreamHelloServer
type MockGreeter_StreamHelloServerMockRecorder struct {
	mock *MockGreeter_StreamHelloServer
}

// NewMockGreeter_StreamHelloServer creates a new mock instance
func NewMockGreeter_StreamHelloServer(ctrl *gomock.Controller) *MockGreeter_StreamHelloServer {
	mock := &MockGreeter_StreamHelloServer{ctrl: ctrl}
	mock.recorder = &MockGreeter_StreamHelloServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreeter_StreamHelloServer) EXPECT() *MockGreeter_StreamHelloServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockGreeter_StreamHelloServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGreeter_StreamHelloServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).Context))
}

// Recv mocks base method
func (m *MockGreeter_StreamHelloServer) Recv() (*testproto.HelloRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*testproto.HelloRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockGreeter_StreamHelloServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockGreeter_StreamHelloServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockGreeter_StreamHelloServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockGreeter_StreamHelloServer) Send(arg0 *testproto.HelloReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockGreeter_StreamHelloServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockGreeter_StreamHelloServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockGreeter_StreamHelloServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockGreeter_StreamHelloServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockGreeter_StreamHelloServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockGreeter_StreamHelloServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockGreeter_StreamHelloServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockGreeter_StreamHelloServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockGreeter_StreamHelloServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockGreeter_StreamHelloServer)(nil).SetTrailer), arg0)
}
